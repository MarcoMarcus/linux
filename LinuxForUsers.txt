		Виртуальные консоли и эмуляторы терминала в Linux.
GNU/Linux - ОС
Linux - ядро

ДИстрибутив - набор программ и приложения для решения разнообразных пользовательских задач .
Все дистрибутивы отличаются друго от друга , у каждого есть свой набор программ , свои достоинства и недостатки ... 

Что такое консоль ? - чисто текстовы интерфейс 
Что такое терминал или эмулятор терминала ? - это программа которая графически эмулирует консоль , тоесть терминал это емулятор консоли .Примеры емуляторов терминала - xfce, lx, gnom... 

cntrl+shift+t - псевдо-терминал(почему их надо использовать ?) - 

в первой вирт-консоли я могу открыть файловый менеджер - mc
во второй могу открыть текстовый редактор - vi .bashrc
в 3 запустить браузер 

who - можна посмотреть сколько виртуальных консолей использует пользователь и вообще сколько пользователей находится в системе



		Командная оболочка в Linux.
Когда я ввожу чтот в терминала , какието команды или даже текс , все это обрабатывает командный интерпритор , тоесть shell .
Shell - это командная оболочка которая предостовляет пользователю интерфейс командной строки. Примеры оболочек - zsh, tcsh, osh ...


echo $SHELL (переменная окружения) 
/bin/bash - баш самая популярная оболчка , в эту оболочку строет язык програмирования шелл-скрипт 

Shell - это командная оболочка обрабатывающая команды которые ввел пользователь



		Горячие клавиши в терминале Linux.



В данном видео рассматриваются горячие клавиши( hotkeys shell ), которые работаю как в текстовой консоли, так и в любых эмуляторах терминала Linux. 
Если быть точнее, то это горячие клавиши Shell 'а, которые работают в таких Shell 'ax как bash, csh, zsh и т.д..(ниже смотрите содержание видео)
▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
Содержание видео:
● 00:00 - Вступление
● 00:10 - Перемещение курсора
● 01:31 - Как удалять, вырезать и вставлять ?
● 02:30 - Как менять местами символы и слова ?
● 03:44 - Перевод текста в нижний регистр
● 04:06 - Как в терминале открыть новую вкладку(псевдотерминал) ?
● 04:49 - Как открыть текстовый редактор по умолчанию ?
● 06:33 - Как скролить в терминале ? 
● 06:46 - Как очистить терминал ?
● 06:51 - Заключение



		Буферы обмена в Linux.
В данном видео рассматриваются буферы обмена, которые есть в Linux.(ниже смотрите содержание видео)
▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
Содержание видео:
● 00:00 - Вступление
● 00:42 - Clipboard буфер
● 01:12 - Primary буфер
● 02:48 - Shell буфер
● 03:26 - Заключение



	Иерархия файловой системы в linux.
FHS - стандарт иерархии файловой системы.
/-корневая директория 


bin - в этой директории находятся основные программы ОС Линукс , если точнее тут находятся исполняемые файлы , тоесть когда в консоли я ввожн какуют команду , если в директории есть соответвуйщий исполняемый файл то комнда выполнится , а эсли нет то шел выдаст ошыбку . Вообщем в директории bin , находятся исполняемые команды(программы) с помощью которых можно попировать , перемещать , удалять , создавать файлы , и ещё много других команд , которые могут выполнятся как с рутом так и обыч юзером . Так-же тут находится комадный интерпритатор-bash, тоесть шел , который обрабатывет все те команды которые ввел пользователь.

sbin - эта директория похожа на sbin , сдесь тоже хранятся исполняемые файлы , тоесть проги которые используются для системного администрирования и настройки системы . Сдесь находятся такие популярные утилиты как blkid - показывает инфу о разделах , сfdisk fdisk gdisk - с помощью котрых можно сделать разметку диска , ifconfig - используется для настройки сети , iptables - для настройки фаирвола , и много других програм которые могут выполнятся в основном только с павами руут . Так-же в данной директории sbin - находятся исполняемые файлы необходимые для загрузки системы 

lib - тут находятся библиотеки которые используются прогами находящимися в директориях bin & sbin , --> modules - тут находятся загружаемые модули ядра + может быть ещё lib64 - но это для 64 версии

usr - тут находятся приложения и файлы используемые пользователями , а так-же консольные утилиты которые не так важны для самой системы , тоесть без которых системы и так будет нормально роботать . В данной директории есть свой директории bin & sbin & lib . Например не очень важные проги находятся в директории bin - сдесь есть исполняемы файл для запуска фаирфокс , исполняемы файл с помощью которого можно запустть програму для роботы с архивами - file-roller , так-же сдесь есть исполняемы файл для запуска консольной проги - find и много других исполняемых файлов с помощью которых можно запускать проги с граф.интерфейсом и консольные проги с текстовым интерфесом. sbin - тут находятся так-же не оч важные проги предназначены для системного администрирования . lib - находятся библиотеки для програм находящихся в директории bin & sbin . В директории есть и другие под-директории : games - для игр , include - находятся все системные подключаемые файлы общего пользования для языка C , local - хранятся приложения и файлы неотносящийся на прямую к дистрибутиву линукс либо установленные пожже чем основная часть системы , share - росположены файлы например использованые для роботы с графоном ->>doc -в которой хранится вся справочная документация по установленным программам , src - находятся исходные коды для ядра линукс и програм . Вообщем когда пользоваетель устанавливает какуе-то приложения то почти все файлы этого приложения роспредиляются по директориям находящимчся в директории - usr , но бывают исключения.

Иерархия в некоторых системах линукс может отличатся (ссылки)

boot - в этой директории находится загрущий grub , ядро линукс , образ intrd . Остальные файлы такие как memtest - тоесть тест ОЗУ , все ети фалы могут менятся в зависимости от дистрибутива . intrd - это диск ОЗУ для начальной инициализации , проще говоря это образ корневой файловой системы , так как при загрузке ядро не имеет возможности получить доступ к файловой системе , поетому модули которые необходимы непосредственно для запуска системы помещаются в initrd , intrd - связан с ядром и загружается как часть ядра в процесе загрузки системы , тоесть при начальной загрузке ядро монтирует образ intrd и использует его в качестве временно файловой системы 

cdroom - точка монтирования для cd - дисков , кароч данная директория нужна для отображения cd-diska 

В линукс есть файловые системы специального вида , так называемые вируалные файловые системы - dev,proc,sys - тесть я могу видеть содержимое этих директорий но рельного дискового пространства они не занимают

dev - тут находятся файлы с помощью которых представлены все физические устройства и псевдо устройства(виртуальные) . Из физич устройст - жосткий диск(sda,sda1,sda2...) , mem - физическая память компа . Виртуальные устройства - виртуальные консоли(tty1,tty2,tty3..). ->pts - находятся файлы псевдо-терминалов(они вертуальные) . Если в директории dev , вставить флешку то сразу тут создастся файл етого устройства , а если вытащить то файл сразу удалится . Вообщем директория dev - содержит все файлы устройст с помощью которых можно получить доступ к какомуто канкрутному устройству 

proc - тут хранятся под-директории для всех процессов которые запущены в данный момент , и много друг важных фалов и под-директорий в которых хрянятся например инфа и сетевых протоколах , о модулях ядра загруженых в данный момент , о файловых системых встроенных в ядро и тд.тп 
узнать версию ядра - cat /proc/version
о проц - сat /proc/cpuinfo

sys - тут хранятся под-директории в которых содержатся например сведения обовсех шинных системах(SATA,USB,PSI..)->bus , block - содержит директории всех блочных устройств присутсвующий в данный момент в системе. class - список сгруп. устройсв по класам (printer,scaner если это ноут bluetuth ...) а также в sys хранится инфа о ядре(kernel) озагружаемых модулях(module) инфа о питании (power) данные о драйверах оборудывания и встроенном ПО (firmware) данные о подключенных устройствах (dev) ...

etc - тут хранятся конфигурационные файлы для всей системы 

home - под-директории которые являются домашними директориями пользователей + lost+found - есть в каждом разделе с файловой системой ext2, ext4. Обычно эта директория пустая, но если произошел сбой в работе файловой системы, например, перебои с электричеством, аппаратные сбои и т.д., то при следующей загрузке выполняется проверка файловой системы. Все найденные поврежденные файлы размещаются в директории lost+found. Если зайти к примеру в марко то можно увидеть заранее созданые директории , помимо них сдесь так-же есть скрытые директории а так-же конфиг.файлы .Кол-ва скрытых директорий  и конфиг файлов в дом.директ может менятся в зависимости от того какой он использеут граф.оболочку а также  сколько установленно приложений ... так сделали что-бы можно было настроить для какогото конкретного пользователя и чтоб у обычного пользователя небыло доступа к общим системным конфиг.файлам которые находятся в директории - etc . Потому что если пользователь будет чтот настраивать в общих системных конфиг файлах то изменятся настройки для всех пользователей и по безопастности - это плохо. Поэтому и создали отдельную директорию home в которой у каждого обыч.пользователя есть своя директория в которой он может делать все что угодно , и при етом с системой ничего не случится . 

root - домашняя директория супер-пользователя . В нем находится 3 конфиг.файла 1).bash_history - история ввода команд 2-3) .bashrc .profile -отвечают за настройку оболочки 

media - в эту директорию подключаются сьемные носители инфы вставляемые в пк. Когда я вставляю в пк какуюто флешку в дистрибутиве убунту или в какомто другом дистрибутиве в директории media автоматом создается точка монтирования , тоесть создается под-директория с таким-же именем что и метка(label) флешки .

Что такое монтирование и точка монтирования ? - монтирования - это подключения файловой системы к общему дереву деректорий . А директория в которую монтируется файловая система флешки назывется точкой монтирования(mount point) 

mnt - исторически сложылось это место где сис.админ монтирует временные фаловые системы когда они их используют . Если нужно чтот вручную смонтировать в консоли , например нужно смонтировать какой-то образ , или нужно смонтировать раздел с Виндовс для чтобы выполнить какието действий с востоновлением файлов , то в таких случаях даную директорию можно использовать как временную точку монтирования . Кароч сам решает для чего она тебе . Я обычно в данной директории создаю директорию share для того что-бы можно было передавать файлы между виртуальной машыной и реальным компом (между Вин и линукс) . Так-же данная директория может использоватся при установке ОС 

То Самое исключение - когда приложение устанавливается не в директорию usr. opt - хранится допол ПО они устанавливается не так как те программы которые есть в стандартных репозиториях . Так-же директория opt делает жизнь легче каких-то сторонных розрабов , которые розрабатывают кросс-платформенный софт для ОС вин,линух,масос. Если розрабатывается софт под линукс не относящийся к дистрибутиву , то разрабам проще сделать так чтоб их приложение устанавливалось целиком в деректория - opt и не нужно думать о том как росположить файл или приложение в под-дериктории usr

tmp - тут хранятся временные файлы системы , и такие файлы удалаются всякий раз когда пользователь перезагружает систему , вообщем директория tmp - это временное хранилище каких-то данных так как все пользоваетли имеют права на чтение и запись в данной директории.

run - централизованое хранилище временных файлов необходимых для запуска служб на ранних стадиях загрузки системы , такие файлы проблематично розмещать в директории tmp в силу того что они могут быть удалены 

var - содержит розлично часто изменяемые файлы . cache-находится кэш различных прграм , spool - задачи ожидающие обработки(очередь печать , задачи проги cron - это планировщик задач) log - системные журналы ... Когда надо поставить сервер то в дебиан подобных дистрибутивах (убунту,линук-минт) директория www по умол. предназначена для розмещение файлов на веб-сервере(сайтов - проктов ...) но все можно настоить , перенести все в другую директорию 

srv - в убунту и подобных дистрибутивах она пуста - функция такая-же что и в www 






		Переменные окружения - часть [1/2].
Есть оболочковые переменные или переменные оболочки(их делят на локальные и глобальные переменные ) 
Локальные переменные - являются внутренимы переменными оболочки , к ним имеет доступ лишь командная оболчка .

Что-бы обьявить переменную надо : test=temp (название переменной затем символ присваивания и значение переменной) 
Как посмотреть значение переменной : echo $test *(вообще команда echo выводит все то что ей передали в качестве параметра ) (Когда я использую переменную всегда перед именем переменной дожен стоять &

Глобальные перемепнны(Переменные окружения) - (envirometn variables) это те переменные которые были експортированы во внешнее окужение 
Окружение - набор переменных окружения к которым имеют доступ все проги 

Как експортировать переменную(сделать её глобальной) ? - export | declare -x (Пример export test)
А если переменная не обьявлена то её можно одновременно обьявить и експортировать , тоесть export test=temp 

Команды для уравление переменнымы в оболочке 
env - отображает все глобальные переменные 
printenv 
export
declare -x
set - показывает вообще все пременные и локальные и глобальные + функции (для удобного просмотра set | less )
unset - удалить переменную (env | grep test
			    unset test)
ИМЕНА ПЕРЕМЕННЫХ ОКРУЖЕНИЯ НУЖНО ЗАПИСЫВАТЬ ЗАГЛАВНЫМИ БУКВАМИ


Как shell узнает как эму где ему нужно искать команды ? в переменной PATH , значение которой список директорий отделяющихся друг от друга : , и когда оболочке bash нужно выполнить какую-то комаду , она просматривает все дериктории перечисленные в данной перменной , если сбросить переменную PATH= (указать ей пустое значение ) то будут выполнятся только встроеные в оболочку команды(set) , я глобальне(env) не выполнится потому как shell не знает где искать испольняемый файл

Более подробная инфа о перменных - man bash  или сайт opennet.ru/man.shtml

--------
Есть команды которые являются частью оболочки, тоесть они встроены в оболочку , а есть команды которые являются внешними прогами , тоесть это те испольняемые файлы программ которые shell ищет в директориях указаных п переменной PATH, и как было показано если спросить данную переенную то будут выполняется только встроеные в оболочку команды 
Так значить как посмотреть какая команда является втроенной а какая глобальной - type (type set | type env)

Когда запускается программа создается процесс и у каждого процесса есть свое окуржение и есть свои переменные окружения , так вот когда запускаеть оболочка создается новый процесс bash у которого свои переменные окружения 
Для выполнения комнды которая является внешней прогой , bash создает новый процесс котрый является дочерным процессом и унаследывает переменные окружения родительского процесса тоесть- bash . И так как программа env - внешняя поетму она показывает переменные окружениея того процесса в котором она выполняется , тоесть те переменны которые были унаследованы от радительского процесса bush , и точно так-же другие внешние проги или скрипты получают доступ к переменным окружения оболочки 
А вот для выполнения встоенной в оболчку команды новый процесс не создается , тоесть команда выполняется уже в созданом процессе bash и соотвественно встроеная команда имеет доступ ко всем перменным оболочки ( и локальным и глобальным) . Так как команда set - эта встоеная команда поэтому она показывает все перменные оболочи




		Переменные окружения -часть 2
cron - планировщик задач которй используется для выполнения какихто задач в определенное время 
crontab - с помощью которой можно редактировать файл с настройками для проги cron 
с помощью команды type узнает что данная команда внешняя Пример : type crontab
сrontab -e - открывается текстовый файл с настройками крон в тектовом редакторе nano 
Как поменять тектовый редактор по умолчанию - export EDITOR=vi
Как поменять текстовый редактор только для конкретной задачи sudo EDITOR=vi vipw ( не нужно использовать export )  - ЭТО БЫЛ ОЧЕНЬ ПРОСТОЙ ПРИМЕР

Вообще переменные окружения можно много где использовать , например есть переменная окружения MAILTO занчение которой это адресс почты , можно с помощью программы cron и переменной MAILTO отправлять увидомление на почту , например в определенное премя суток программа cron выполняет какуюто задачу , ну например запускает какойто скрип и затем результатом задачи проги крон будет выслан пользователю по почте которая указана в переменно MAILTO, так-что переменные окружение используют розрабы розличных приложений , майнеры ...
Перменные окружение можно использовать в шелл-скриптах , точто так-же как и для любой другой проги создаетстя отдельный процес которой наследует переменные окружения оболочки 
Программы запускаемые из скрипта тоже имеют доступ к тому процессу в котором выполняется скрипт 
Переменные которые я создаю в самом скрипте они являются локальными и доступны внутри самого скрипта - это если в самом скрипте не использовать команду export , если использовать команду export то переменная будет експортирована(она станет глобальной , тоесть станет переменной окружения ) 
Дочерний процесс не может експортировать переменные родительскому процесу, если например используя скрипт захочу изменить значение переменной окружения оболчки , то сделать это не получится потому как процес bash и процес в котором выполняется скрипт - это 2 разных процесса .

Вообщем переменные окружения или глобальные переменные , очень важны так как они содержат специальные значения которые используются розличными прогами в линукс , и если я буду исппользывать переменные окружения , то очень важно понимать как все роботает , как проги получают доступ к переменной окружения .
Если я роботаю с несколькими окнами терминалов , то в каждом из них функционирукет самостоятельная оболочка , и измениния переменной в оболочке никак не влияет на другие оболочки , тоесть когда я присваиваю какието значения переменным то все ето остается действительным только для одной оболчки , и так происходит потомучто для каждой оболочки создается отдельнй процесс и соответвенно у каждого процесса свои переменные окружения . Когда я закрою терминал , соответственно убью процес bash , и если я создавал пермеменные окружения то они тоже удалятся , так вот чтоб при запуске оболочки создавались нужные переменные или менялось значение у какихто переменных - необходими все это указак либо в файле с именем profile( /etc/profile) либо указать все ето в файле .profile (находится в домашней дериктории пользователя (он скрыт , чтоб увидеть ls -a) 
Как посмотреть файл который находится в дериктории etc - nano /etc/profile - и етот файл содержит общесистемные настройки bash , и то что в нем настраивается все это применяется для всех пользователей * с помощью оператора точка подключается файл bash.bashrc - в котором также хранятся настройки для shela , также в этом файле подключаются скрипты которые находятся в директории profile.d - тоесть если нужно указать переменные окружения для всех пользователей то прописовать их надо в етом файле. например export TEMP=test , сохряняем файл , делаем лог-аут и переменная темп появится 
Оператор точка похож на include 

Что касается файла .profile - тот который скрытый и находится в домашней директории пользователя , в этом файле указываются переменные окружения для какогото конкретного пользователя , в моем случае это пльзователь марко . Используч переменные окружения я могу изменить редактор по умолчанию у любого пользователя , или сделать так что когда етот пользователь открывает терминал у него запускалась какето другае оболочка и тд... 

*В arch-linux и в других дистрибутивах в дом.директории пользователя может и не быть файла с .profile но тогда там будет .bash_profile - и в этом файле я так-же могу прописать переменные окружения для какогото конеретного пользователя  
